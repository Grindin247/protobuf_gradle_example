/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

mainClassName = 'app.UdpServerApp'

 buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
  }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.6.1'
    runtime files('_autogen_/main/java/app')
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs 'src/main/java'  
        }
    }
    // remove the test configuration - at least in your example you don't have a special test proto file
}

protobuf {
  generateProtoTasks.generatedFilesBaseDir = "$projectDir/_autogen_"

  generateProtoTasks {
    all().each { task ->
      task.builtins {
        // Generates Python code in the output folder. Java is generated by default
        python { }
      }
    }
  }
}
// protobuf {
//     // Configure the protoc executable
//     protoc {
//         // Download from repositories
//         artifact = 'com.google.protobuf:protoc:3.6.1'
//     }

//     generateProtoTasks.generatedFilesBaseDir = 'generated-sources'

//     generateProtoTasks {
//         // In addition to all(), you may get the task collection by various
//         // criteria:
//         // (Java only) returns tasks for a sourceSet
//         ofSourceSet('main')
//         all().each { task ->
//             task.builtins {
//             // Generates Python code in the output folder:
//             python { 'main/python' }
//             }
//         }
//     }   
// }

task runJavaServer(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "app.UdpServerApp"
  args "arg1", "arg2"
}

task runJavaClient(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "app.UdpClientApp"
  args "arg1", "arg2"
}

ext.pythonPath = "$System.env.PYTHONPATH" + System.getProperty("path.separator") + "$projectDir/_autogen_/main/python"
task runPythonClient(type: Exec) {
  environment "PYTHONPATH", pythonPath
  workingDir 'src/main/python'

  commandLine 'python', "udpClient.py"
}

ext.pythonPath = "$System.env.PYTHONPATH" + System.getProperty("path.separator") + "$projectDir/_autogen_/main/python"
task runPythonServer(type: Exec) {
  environment "PYTHONPATH", pythonPath
  workingDir 'src/main/python'
  commandLine 'python', 'udpServer.py'
}